{"version":3,"sources":["components/ImageView.js","components/Uploader.js","api.js","testData.js","components/App.js","index.js"],"names":["imgStyle","width","visibility","pointerEvents","divStyle","imageVisible","imageUrl","position","backgroundImage","backgroundSize","h2Style","color","top","left","ImageView","props","textColour","textVisible","text","handleTextClick","useState","originalImageWidth","setOriginalImageWidth","newWidth","setNewWidth","imgElement","React","useRef","useEffect","handleSize","onTextClick","e","console","log","target","innerHTML","navigator","clipboard","writeText","textStyle","x","y","margin","fontSize","fontStyle","WebkitTextStrokeWidth","WebkitTextStrokeColor","image","current","naturalWidth","style","src","alt","ref","onLoad","words","Array","isArray","filter","length","match","map","i","word","imageScaleFactor","scale","scaleCoordinates","key","onClick","overlayText","Container","styled","div","isDragAccept","isDragReject","isDragActive","getColor","Uploader","parentDispatch","response","setResponse","waiting","setWaiting","onDrop","useCallback","acceptedFiles","name","file","dispatch","a","fd","FormData","append","process","API_URL","axios","post","headers","catch","error","type","payload","data","action","url","useDropzone","accept","getRootProps","getInputProps","rejectedFiles","rejectedFilesItems","path","size","className","Button","testData","fetch","json","GreenCheckbox","withStyles","root","green","checked","Checkbox","useStyles","makeStyles","App","classes","checkForImage","setCheckForImage","checkForText","setCheckForText","setTextColour","setImageUrl","textData","setTextData","textAreaValue","setTextAreaValue","next","setNext","imageWidth","setImageWidth","Grid","container","direction","justify","alignItems","FormControlLabel","control","onChange","label","TextField","id","variant","event","value","Typography","gutterBottom","Slider","aria-labelledby","step","marks","min","max","window","innerWidth","newValue","valueLabelDisplay","handle","onStart","onStop","multiline","rows","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.a296410d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n/**\r\n * Takes in an image and a list of text with their coordinates and displays the text on top of the image\r\n * @param {*} props props.width\r\n */\r\nconst ImageView = props => {\r\n  //\r\n  //<img style={{visibility: 'hidden'}} src=\"SP229975_0.jpg\" />\r\n  const {\r\n    width,\r\n    text,\r\n    imageUrl,\r\n    textVisible,\r\n    imageVisible,\r\n    textColour,\r\n    handleTextClick,\r\n  } = { textColour: \"tomato\", textVisible: true, imageVisible: true, ...props };\r\n  const [originalImageWidth, setOriginalImageWidth] = useState(0);\r\n  const [newWidth, setNewWidth] = useState(0);\r\n\r\n  const imgElement = React.useRef(null);\r\n\r\n  useEffect(() => {\r\n    handleSize(imgElement);\r\n  }, [width]);\r\n\r\n  //const showOverlayText = () => {\r\n  //  console.log('overlaying text');\r\n  //  return originalImageWidth && overlayText(text)\r\n  //}\r\n\r\n  const onTextClick = e => {\r\n    console.log(e.target.innerHTML);\r\n    navigator.clipboard.writeText(e.target.innerHTML);\r\n    handleTextClick(e.target.innerHTML);\r\n  };\r\n\r\n  /** Style of the text to be displayed by overlayText */\r\n  const textStyle = (x, y) => {\r\n    return {\r\n      color: textColour,\r\n      position: \"absolute\",\r\n      top: y,\r\n      left: x,\r\n      margin: 0,\r\n      fontSize: \"10px\",\r\n      fontStyle: \"italic\",\r\n      //fontWeight: 'bold',\r\n      WebkitTextStrokeWidth: \"0.7px\",\r\n      WebkitTextStrokeColor: textColour,\r\n      visibility: textVisible ? \"visible\" : \"hidden\",\r\n    };\r\n  };\r\n\r\n  /**\r\n   * scale coordinates\r\n   * @param {x} object, x,y,scale {int,int,float}: coordinates to scale\r\n   * @returns {x,y} where x and y have been * by scale\r\n   */\r\n  const scaleCoordinates = ({ x, y, scale }) => {\r\n    // The image will be rescaled to fit the view,\r\n    // we will figure out the how much it rescaled and\r\n    // perform the same scale to the coordinates.\r\n    x = x * scale;\r\n    y = y * scale;\r\n    return { x, y };\r\n  };\r\n\r\n  /** Overalyed text on relative positioned parent */\r\n  const overlayText = words => {\r\n    console.log(\"rendered text again\");\r\n    // Remove 1 character things\r\n    const wordFilter = x =>\r\n      x[\"text\"].length > 1 || x[\"text\"].match(/[a-z0-9A-Z.]/i);\r\n    // For each text make a component with its x an y as its position\r\n    return (\r\n      Array.isArray(words) &&\r\n      words.filter(wordFilter).map((text, i) => {\r\n        const word = text[\"text\"];\r\n        // Find how much the image was scaled by and get the new scaled Coordinates\r\n        const imageScaleFactor = newWidth / originalImageWidth;\r\n        const { x, y } = scaleCoordinates({\r\n          x: text[\"bounds\"][0][\"x\"],\r\n          y: text[\"bounds\"][0][\"y\"],\r\n          scale: imageScaleFactor,\r\n        });\r\n\r\n        //sanity check // <h3 style={textStyle(0,0)}>{testf}</h3>\r\n        return (\r\n          <span key={i} onClick={onTextClick} style={textStyle(x, y)}>\r\n            {word}\r\n          </span>\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  /** Gets called when the image is loaded onto the screen and places its width into state */\r\n  const handleSize = image => {\r\n    if (image) {\r\n      console.log(image);\r\n      console.log(\"handling image height\");\r\n      setOriginalImageWidth(image.current.naturalWidth);\r\n      setNewWidth(image.current.width);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={divStyle(imageVisible, imageUrl)}>\r\n      <img\r\n        style={imgStyle(width)}\r\n        src={imageUrl}\r\n        alt='plan'\r\n        ref={imgElement}\r\n        onLoad={() => handleSize(imgElement)}\r\n      />\r\n      {originalImageWidth && overlayText(text)}\r\n      <h3 style={h2Style}>test</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\n// TODO(gary): make global css into styled components\r\nconst imgStyle = width => ({\r\n  visibility: \"hidden\",\r\n  pointerEvents: \"none\",\r\n  width: width,\r\n});\r\n\r\nconst divStyle = (imageVisible, imageUrl) => {\r\n  return {\r\n    visibility: imageVisible,\r\n    position: \"relative\",\r\n    backgroundImage: imageVisible ? `url(${imageUrl})` : \"none\",\r\n    backgroundSize: \"contain\",\r\n    /*backgroundImage: 'url(' + imgUrl + ')',*/\r\n  };\r\n};\r\n\r\nconst h2Style = {\r\n  color: \"tomato\",\r\n  position: \"absolute\",\r\n  top: \"200px\",\r\n  left: \"0\",\r\n  width: \"100%\",\r\n};\r\n\r\nexport default ImageView;\r\n","import React, { useCallback, useState } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport styled from 'styled-components';\r\n\r\nimport { uploadPlan } from '../api';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\n\r\n\r\nconst getColor = (props) => {\r\n  if (props.isDragAccept) {\r\n    return '#00e676';\r\n  }\r\n  if (props.isDragReject) {\r\n    return '#ff1744';\r\n  }\r\n  if (props.isDragActive) {\r\n    return '#2196f3';\r\n  }\r\n  return '#eeeeee';\r\n}\r\n\r\nconst Container = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n\r\n  border-width: 2px;\r\n  border-radius: 2px;\r\n  border-color: ${props => getColor(props)};\r\n  border-style: dashed;\r\n  \r\n  outline: none;\r\n  transition: border .24s ease-in-out;\r\n  :focus {\r\n    border-color: #2196f3;\r\n  }\r\n  :hover {\r\n    border-color:lightblue;\r\n  }\r\n`;\r\n\r\n/** Uplods an image */\r\nconst Uploader = (props) => {\r\n\r\n  const { parentDispatch } = props;\r\n\r\n  const [response, setResponse] = useState('')\r\n  const [waiting, setWaiting] = useState(false)\r\n\r\n\r\n\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    // Do something with the files\r\n    //acceptedFiles[0] = 'file'`\r\n    if (acceptedFiles){console.log(acceptedFiles[0].name)}\r\n    setWaiting(true)\r\n\r\n    const dispatch = (action) => {\r\n      console.log(action.payload)\r\n      if (!action.payload){\r\n        setResponse('Error receiving response from api');\r\n      } else if (!action.payload['data']){\r\n          setResponse('Error receiving response from api, no data');\r\n      } else if ('error' in action.payload) {\r\n        setResponse('Error uploading file.' + action.payload['error']);\r\n      } else if ('data' in action.payload) {\r\n        setResponse('valid');\r\n        parentDispatch(\r\n          {\r\n            url: action.payload['url'],\r\n            data: action.payload['data']\r\n          }\r\n        )\r\n        setWaiting(false)\r\n      } else {\r\n        setResponse('Error receiving response from api');\r\n      }\r\n    }\r\n\r\n    try {\r\n      uploadPlan(acceptedFiles[0])(dispatch)\r\n    } catch (error) {\r\n      setResponse('Error receiving response from api');\r\n    }\r\n    \r\n  }, [parentDispatch])\r\n\r\n  //const refreshClick = () => {\r\n  //  window.location.reload();\r\n  //}\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    rejectedFiles,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject\r\n  } = useDropzone({ onDrop, accept: 'image/*' });\r\n\r\n  const rejectedFilesItems = rejectedFiles.map(file => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Container {...getRootProps({ isDragActive, isDragAccept, isDragReject })}>\r\n        <input {...getInputProps()} />\r\n        <Button color=\"inherit\">\r\n          <PublishIcon />\r\n          Upload An Image\r\n        </Button>\r\n      </Container>\r\n\r\n      {response && response !== 'valid' \r\n        ? <h3>{`Warning: ${response}`}  </h3>\r\n        : <></>\r\n      }\r\n      {rejectedFiles.length ? <h4> Rejected Items</h4> : ''}\r\n      <ul>\r\n          {rejectedFilesItems}\r\n      </ul>\r\n      {waiting ? <p>Please Wait</p> : ''}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Uploader;","import axios from \"axios\";\r\n\r\nexport const uploadPlan = file => async dispatch => {\r\n  console.log(file);\r\n  let fd = new FormData();\r\n  fd.append(\"file\", file);\r\n\r\n  process.env.API_URL\r\n    ? console.log(process.env.API_URL)\r\n    : console.log(\"no env\");\r\n\r\n  const response = await axios\r\n    .post(\r\n      process.env.API_URL\r\n        ? `${process.env.API_URL}`\r\n        : \"http://127.0.0.1:5000/planUpload\",\r\n      fd,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      }\r\n    )\r\n    .catch(error => {\r\n      console.error(\"Error:\", error);\r\n      dispatch({ type: \"PLAN_UPLOAD\", payload: error });\r\n    });\r\n\r\n  dispatch({ type: \"PLAN_UPLOAD\", payload: response.data });\r\n};\r\n\r\nexport const uploadPlanOld = file => dispatch => {\r\n  let formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  fetch(\"http://127.0.0.1:5000/planUpload\", {\r\n    method: \"POST\",\r\n    body: formData,\r\n  })\r\n    .then(response => response.json())\r\n    .then(result => {\r\n      console.log(\"Success:\", result);\r\n      dispatch({ type: \"PLAN_UPLOAD\", payload: result });\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error:\", error);\r\n      dispatch({ type: \"PLAN_UPLOAD\", payload: error });\r\n    });\r\n};\r\n","export const testimageurl = \"testImage.jpg\";\r\n\r\nexport const testData = async (dispatch) => {\r\n  const data = await fetch(\"testJson.json\");\r\n  const json = await data.json();\r\n  console.log(json);\r\n  dispatch(json);\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ImageView from \"./ImageView\";\r\nimport Uploader from \"./Uploader\";\r\n\r\nimport { testimageurl, testData } from \"../testData\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Draggable from \"react-draggable\";\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    \"&$checked\": {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})(props => <Checkbox color='default' {...props} />);\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 300,\r\n    margin: \"auto\",\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n\r\n  const [checkForImage, setCheckForImage] = useState(true);\r\n  const [checkForText, setCheckForText] = useState(true);\r\n  const [textColour, setTextColour] = useState(\"tomato\");\r\n\r\n  const [imageUrl, setImageUrl] = useState(testimageurl);\r\n  const [textData, setTextData] = useState(null);\r\n\r\n  const [textAreaValue, setTextAreaValue] = useState(\"\");\r\n  const [next, setNext] = useState(0);\r\n\r\n  //let newText = text.split('\\n').map((item, i) => {\r\n  //  return <p key={i}>{item}</p>;\r\n  //});\r\n  const handleTextClick = text => {\r\n    const map = [\",\", \",\"];\r\n\r\n    setTextAreaValue(textAreaValue + text + map[next]);\r\n\r\n    setNext(next === 1 ? 0 : next + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    testData(setTextData);\r\n  }, [setTextData]);\r\n\r\n  /* Gets called upon filedupload, only one dispatch in this app so we aren't filtering by payload type */\r\n  const dispatch = ({ url, data }) => {\r\n    console.log(url, data);\r\n    const [, ...textData] = data;\r\n    console.log(\"data\");\r\n\r\n    console.log(data);\r\n    console.log(textData);\r\n\r\n    setImageUrl(url);\r\n    setTextData(textData);\r\n  };\r\n\r\n  const [imageWidth, setImageWidth] = useState(830);\r\n  //const [, ...textData] = ; //first response from G vision is bogus\r\n\r\n  const handleChange = event => {\r\n    setTextColour(event.target.value);\r\n  };\r\n  //<img src=\"./src/components/1.jpg\" />\r\n  return (\r\n    <Grid container direction='column' justify='center' alignItems='center'>\r\n      <h1>Text Extractor</h1>\r\n\r\n      <div>\r\n        <Uploader parentDispatch={dispatch} />\r\n        <p></p>\r\n      </div>\r\n      <div>\r\n        <FormControlLabel\r\n          control={\r\n            <GreenCheckbox\r\n              checked={checkForImage}\r\n              onChange={() => setCheckForImage(!checkForImage)}\r\n              name='ImageCheck'\r\n            />\r\n          }\r\n          label='Show Image'\r\n        />\r\n\r\n        <FormControlLabel\r\n          control={\r\n            <GreenCheckbox\r\n              checked={checkForText}\r\n              onChange={() => setCheckForText(!checkForText)}\r\n              name='TextCheck'\r\n            />\r\n          }\r\n          label='Show Text'\r\n        />\r\n\r\n        <TextField\r\n          id='TextColor'\r\n          label='Text Colour'\r\n          variant='outlined'\r\n          onChange={handleChange}\r\n          value={textColour}\r\n          size='small'\r\n        />\r\n        <div className={classes.root}>\r\n          <Typography id='discrete-slider' gutterBottom>\r\n            Image Width\r\n          </Typography>\r\n          <Slider\r\n            aria-labelledby='discrete-slider'\r\n            //aria-labelledby=\"range-slider\"\r\n            step={100}\r\n            marks\r\n            min={500}\r\n            max={window.innerWidth}\r\n            value={imageWidth}\r\n            onChange={(event, newValue) => setImageWidth(newValue)}\r\n            valueLabelDisplay='auto'\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <ImageView\r\n        width={`${imageWidth}px`}\r\n        imageUrl={imageUrl}\r\n        textVisible={checkForText}\r\n        imageVisible={checkForImage}\r\n        text={textData}\r\n        textColour={textColour}\r\n        handleTextClick={handleTextClick}\r\n      />\r\n\r\n      <div style={{ position: \"absolute\", top: \"10%\", left: 0 }}>\r\n        <Draggable handle='strong' {...{ onStart: () => \"\", onStop: () => \"\" }}>\r\n          <div className='box no-cursor'>\r\n            <strong className='cursor'>\r\n              <div>Microstation Text</div>\r\n            </strong>\r\n            <div>\r\n              <TextField\r\n                id='standard-multiline-static'\r\n                label=''\r\n                multiline\r\n                rows={30}\r\n                variant='outlined'\r\n                value={textAreaValue}\r\n                onChange={event => setTextAreaValue(event.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Draggable>\r\n      </div>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n//{textAreaValue.split('\\n').map((item, i) => <>{item}<br></br></>)}\r\n//\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}